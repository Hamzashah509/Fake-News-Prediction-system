# -*- coding: utf-8 -*-
"""Fake_news_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cNmrFXxrAuW4R7TRKBaRXdqwHWNYNHKu
"""



"""Importing Dependenices"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

import pandas as pd

"""Data collection and Preprocessing"""

news_dataset = pd.read_csv('/content/train.csv')

news_dataset.head()

news_dataset.shape

news_dataset.describe()

news_dataset.isnull().sum()

#replace null values with empty string
news_dataset.fillna('', inplace=True)

news_dataset.isnull().sum()

#mergeing the author and title in new column as author_title
news_dataset['author_title'] = news_dataset['author'].str.cat(news_dataset['title'], sep=' ')

print(news_dataset['author_title'])

#separating the data & label
X = news_dataset.drop(columns='label',axis=1)
Y = news_dataset['label']

print(X)

print(Y)

"""Stemming : reducing the a word to its root word"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]', ' ', content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news_dataset['author_title'] = news_dataset['author_title'].apply(stemming)

print(news_dataset['author_title'])

#separating the data & label
X = news_dataset['author_title']
Y = news_dataset['label']

print(X)

print(Y)

from sklearn.feature_extraction.text import TfidfVectorizer

# Create an instance of TfidfVectorizer
vectorizer = TfidfVectorizer()

# Fit and transform the text data
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""Split train and test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, train_size=0.2,stratify=Y ,random_state=2)

"""Model training using Logistic Regression

"""

model = LogisticRegression()

model.fit(X_train,Y_train)

"""Model Evaluation"""

training_data_prediction = model.predict(X_train)

traning_data_accuracy_score = accuracy_score(training_data_prediction, Y_train)

print('Accuravy of traning data : ',traning_data_accuracy_score)

test_data_prediction = model.predict(X_test)

test_data_accuracy_score = accuracy_score(test_data_prediction, Y_test)

print('Accuravy of test data : ',test_data_accuracy_score)

"""Making a predictive system"""

X_new = X_test[0]

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')

